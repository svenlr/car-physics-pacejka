from acados_template import AcadosModel
from acados_template.acados_ocp_formulation_helper import get_symbols_with_positions


def generate_model_structs(model: AcadosModel, time_step: float, namespace:str, default_params=None):
    nx = model.x.size()[0]
    nu = model.u.size()[0]
    cpp_code = "#pragma once\n"
    cpp_code += "/* Do not modify this file directly. This is an auto-generated file, "
    cpp_code += "generated by\n   {py_script} */\n".format(py_script=__file__)
    cpp_code += "namespace {} {{\n".format(namespace)

    cpp_code += "\tstruct state {\n"
    for x_idx in range(nx):
        name = model.x[x_idx].name()
        cpp_code += "\t\tdouble {name} = 0;\n".format(name=name)
    cpp_code += "\t};\n\n"

    cpp_code += "\tstruct control {\n"
    for u_idx in range(nu):
        name = model.u[u_idx].name()
        cpp_code += "\t\tdouble {name} = 0;\n".format(name=name)
    cpp_code += "\t};\n\n"

    cpp_code += "\tstruct params {\n"
    if default_params is None:
        default_params = [0] * model.p.size()[0]
    symbols = get_symbols_with_positions(model.p)
    for symbol, i, j in symbols:
        if j - i > 1:
            values = ", ".join([str(p) for p in default_params[i:j]])
            cpp_code += "\t\tdouble {symbol}[{size}] = {{{values}}};\n".format(symbol=symbol, size=j - i, values=values)
        else:
            value = default_params[i]
            cpp_code += "\t\tdouble {symbol} = {value};\n".format(symbol=symbol, value=value)
    cpp_code += "\t};\n\n"

    cpp_code += "\tconstexpr double TIME_STEP = {time_step};\n".format(time_step=time_step)
    cpp_code += "\n"
    cpp_code += "}\n"
    return cpp_code
